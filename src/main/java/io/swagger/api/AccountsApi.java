/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Account;
import io.swagger.model.dto.AccountDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-17T12:11:50.256Z[GMT]")
@Validated
public interface AccountsApi {

    @Operation(summary = "Add an account", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Account added succesfully"),
        
        @ApiResponse(responseCode = "401", description = "Authorization failed"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/accounts",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addAccount(@Parameter(in = ParameterIn.DEFAULT, description = "account", required=true, schema=@Schema()) @Valid @RequestBody AccountDTO body);


    @Operation(summary = "get all accounts", description = "Returns a list of Accounts.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Accounts", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Account.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter"),
        
        @ApiResponse(responseCode = "401", description = "Authorization failed") })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> allAccounts(@Min(0)@Parameter(in = ParameterIn.QUERY, description = "number of accounts to skip for pagination" ,schema=@Schema(allowableValues={  }
)) @Valid @RequestParam(value = "skip", required = false) Integer skip, @Min(0) @Max(100) @Parameter(in = ParameterIn.QUERY, description = "maximum number of accounts to return" ,schema=@Schema(allowableValues={  }, maximum="100"
)) @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @Operation(summary = "Finds accounts by Iban", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Account(s) found", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Account.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid userId"),
        
        @ApiResponse(responseCode = "401", description = "Authorization failed"),
        
        @ApiResponse(responseCode = "404", description = "Account not found") })
    @RequestMapping(value = "/iban/{iban}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> findAccountsByIban(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("iban") String iban);


    @Operation(summary = "Finds accounts by User Id", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Customer", "Employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Account(s) found", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Account.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid userId"),
        
        @ApiResponse(responseCode = "401", description = "Authorization failed"),
        
        @ApiResponse(responseCode = "404", description = "Account not found") })
    @RequestMapping(value = "/userId/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> findAccountsByUserId(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Long userId);


    @Operation(summary = "Lock account by iban", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Account successfully locked"),
        
        @ApiResponse(responseCode = "400", description = "Invalid iban given"),
        
        @ApiResponse(responseCode = "401", description = "Authorization failed"),
        
        @ApiResponse(responseCode = "404", description = "Account not found") })
    @RequestMapping(value = "/lock/{iban}",
            method = RequestMethod.PUT)
    ResponseEntity<Void> lockAccount(@Parameter(in = ParameterIn.PATH, description = "iban to lock", required=true, schema=@Schema()) @PathVariable("iban") String iban, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Update an account", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Customer", "Employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Updated account successfully"),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "401", description = "Authorization failed"),
        
        @ApiResponse(responseCode = "404", description = "Account not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/accounts",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateAccount(@Parameter(in = ParameterIn.DEFAULT, description = "account", required=true, schema=@Schema()) @Valid @RequestBody Account body);

}

